{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5532b924",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== Exercise 1: Energy Consumption Basics ===\n",
      "Daily Energy Consumption:\n",
      "Lighting: 450.00 kWh\n",
      "HVAC: 1200.00 kWh\n",
      "Equipment: 350.00 kWh\n",
      "Other: 180.00 kWh\n",
      "Total: 2180.00 kWh\n",
      "\n",
      "Monthly Consumption: 65400.00 kWh\n",
      "\n",
      "Monthly Energy in MJ: 235440.00 MJ\n",
      "Monthly Energy in GJ: 235.44 GJ\n",
      "\n",
      "Monthly Cost: $7,848.00\n",
      "Annual Cost: $94,176.00\n",
      "\n",
      "=== Exercise 2: Building Energy Analysis ===\n",
      "Office A: 85000 kWh / 2500 m^2 = 34.00 kWh/m^2/month\n",
      "Retail B: 62000 kWh / 1800 m^2 = 34.44 kWh/m^2/month\n",
      "School C: 48000 kWh / 3200 m^2 = 15.00 kWh/m^2/month\n",
      "Hospital D: 125000 kWh / 4000 m^2 = 31.25 kWh/m^2/month\n",
      "Apartment E: 71000 kWh / 2800 m^2 = 25.36 kWh/m^2/month\n",
      "\n",
      "Total Monthly Consumption: 391,000.00 kWh\n",
      "Average Monthly Consumption: 78,200.00 kWh\n",
      "Maximum Consumption: 125,000.00 kWh\n",
      "Minimum Consumption: 48,000.00 kWh\n",
      "\n",
      "Buildings Above Average Consumption: ['Office A', 'Hospital D']\n",
      "Count: 2\n",
      "\n",
      "=== Exercise 3: Energy Efficiency Classifier ===\n",
      "Office A: 408.00 kWh/m^2/year\n",
      "Retail B: 413.33 kWh/m^2/year\n",
      "School C: 180.00 kWh/m^2/year\n",
      "Hospital D: 375.00 kWh/m^2/year\n",
      "Apartment E: 304.29 kWh/m^2/year\n",
      "\n",
      "=== Energy Efficiency Report ===\n",
      "Office A: 408.00 kWh/m^2/year - Rating: F\n",
      "Retail B: 413.33 kWh/m^2/year - Rating: F\n",
      "School C: 180.00 kWh/m^2/year - Rating: D\n",
      "Hospital D: 375.00 kWh/m^2/year - Rating: F\n",
      "Apartment E: 304.29 kWh/m^2/year - Rating: F\n",
      "\n",
      "=== Rating Summary ===\n",
      "Rating A: 0 buildings\n",
      "Rating B: 0 buildings\n",
      "Rating C: 0 buildings\n",
      "Rating D: 1 buildings\n",
      "Rating F: 4 buildings\n",
      "Most Common Rating: F\n",
      "\n",
      "=== Exercise 4: Energy Cost Calculator ===\n",
      "Monthly Cost for 50,000 kWh @ $0.12/kWh: $6,000.00\n",
      "\n",
      "Peak Cost: $7,650.00\n",
      "Off-Peak Cost: $2,720.00\n",
      "Total Cost: $10,370.00\n",
      "\n",
      "=== Exercise 5: Energy Optimization ===\n",
      "Most Efficient: School C (180.00 kWh/m^2/year, Rating D)\n",
      "Least Efficient: Retail B (413.33 kWh/m^2/year, Rating F)\n",
      "Percentage Difference: 56.45%\n",
      "\n",
      "=== Energy Savings Potential ===\n",
      "If all buildings achieved Rating B (100 kWh/m^2/year):\n",
      "Office A: Could save 770,000 kWh/year\n",
      "Retail B: Could save 564,000 kWh/year\n",
      "School C: Could save 256,000 kWh/year\n",
      "Hospital D: Could save 1,100,000 kWh/year\n",
      "Apartment E: Could save 572,000 kWh/year\n",
      "\n",
      "Total Potential Savings: 3,262,000 kWh/year\n",
      "Annual Cost Savings: $391,440.00\n",
      "\n",
      "=== Bonus Challenge: Interactive Energy Calculator ===\n",
      "Exiting interactive calculator. Goodbye!\n"
     ]
    }
   ],
   "source": [
    "# lab01_energy_calculator.ipynb\n",
    "# --------------------------------------------------\n",
    "# CE49X: Introduction to Computational Thinking and Data Science\n",
    "# Instructor: Dr. Eyuphan Koç | Fall 2025\n",
    "# Author: Arben Üstün (2024706018)\n",
    "# --------------------------------------------------\n",
    "# This notebook calculates, classifies, and analyzes building energy consumption.\n",
    "# All code cells executed and outputs shown.\n",
    "\n",
    "\n",
    "# --------------------------------------------------\n",
    "# EXERCISE 1: ENERGY CONSUMPTION BASICS\n",
    "# --------------------------------------------------\n",
    "print(\"\\n=== Exercise 1: Energy Consumption Basics ===\")\n",
    "\n",
    "# --- Part A: Daily and Monthly Energy Calculation ---\n",
    "# Define daily energy usage for different systems (in kWh)\n",
    "lighting = 450\n",
    "hvac = 1200\n",
    "equipment = 350\n",
    "other = 180\n",
    "\n",
    "# Calculate total daily and monthly energy consumption\n",
    "total_daily = lighting + hvac + equipment + other\n",
    "monthly_consumption = total_daily * 30\n",
    "\n",
    "# Display daily and monthly results\n",
    "print(f\"Daily Energy Consumption:\\nLighting: {lighting:.2f} kWh\\nHVAC: {hvac:.2f} kWh\\nEquipment: {equipment:.2f} kWh\\nOther: {other:.2f} kWh\\nTotal: {total_daily:.2f} kWh\")\n",
    "print(f\"\\nMonthly Consumption: {monthly_consumption:.2f} kWh\")\n",
    "\n",
    "# --- Part B: Unit Conversion ---\n",
    "# Convert kWh → MJ and GJ (1 kWh = 3.6 MJ)\n",
    "MJ = monthly_consumption * 3.6\n",
    "GJ = MJ / 1000\n",
    "print(f\"\\nMonthly Energy in MJ: {MJ:.2f} MJ\")\n",
    "print(f\"Monthly Energy in GJ: {GJ:.2f} GJ\")\n",
    "\n",
    "# --- Part C: Cost Calculation ---\n",
    "# Assume energy price = $0.12 per kWh\n",
    "rate = 0.12\n",
    "monthly_cost = monthly_consumption * rate\n",
    "annual_cost = monthly_cost * 12\n",
    "print(f\"\\nMonthly Cost: ${monthly_cost:,.2f}\")\n",
    "print(f\"Annual Cost: ${annual_cost:,.2f}\")\n",
    "\n",
    "\n",
    "# --------------------------------------------------\n",
    "# EXERCISE 2: BUILDING ENERGY ANALYSIS\n",
    "# --------------------------------------------------\n",
    "print(\"\\n=== Exercise 2: Building Energy Analysis ===\")\n",
    "\n",
    "# Building dataset: names, energy usage, and floor area\n",
    "buildings = ['Office A', 'Retail B', 'School C', 'Hospital D', 'Apartment E']\n",
    "monthly_consumption = [85000, 62000, 48000, 125000, 71000]\n",
    "floor_area = [2500, 1800, 3200, 4000, 2800]\n",
    "\n",
    "# --- Part A: Energy Intensity Calculation ---\n",
    "# Energy Intensity = Monthly Consumption / Floor Area (kWh/m²/month)\n",
    "energy_intensity = []\n",
    "for i, building in enumerate(buildings):  # enumerate provides index + value\n",
    "    intensity = monthly_consumption[i] / floor_area[i]\n",
    "    energy_intensity.append(intensity)  # store result in list\n",
    "    print(f\"{building}: {monthly_consumption[i]} kWh / {floor_area[i]} m^2 = {intensity:.2f} kWh/m^2/month\")\n",
    "\n",
    "# --- Part B: Statistical Analysis ---\n",
    "# Find total, average, max, and min consumption\n",
    "total_consumption = sum(monthly_consumption)\n",
    "average_consumption = total_consumption / len(monthly_consumption)\n",
    "max_consumption = max(monthly_consumption)\n",
    "min_consumption = min(monthly_consumption)\n",
    "\n",
    "print(f\"\\nTotal Monthly Consumption: {total_consumption:,.2f} kWh\")\n",
    "print(f\"Average Monthly Consumption: {average_consumption:,.2f} kWh\")\n",
    "print(f\"Maximum Consumption: {max_consumption:,.2f} kWh\")\n",
    "print(f\"Minimum Consumption: {min_consumption:,.2f} kWh\")\n",
    "\n",
    "# --- Part C: Find Buildings Above Average ---\n",
    "# Identify which buildings consume more than the average\n",
    "above_avg_buildings = []\n",
    "for i, building in enumerate(buildings):\n",
    "    if monthly_consumption[i] > average_consumption:\n",
    "        above_avg_buildings.append(building)\n",
    "\n",
    "print(f\"\\nBuildings Above Average Consumption: {above_avg_buildings}\")\n",
    "print(f\"Count: {len(above_avg_buildings)}\")\n",
    "\n",
    "\n",
    "# --------------------------------------------------\n",
    "# EXERCISE 3: ENERGY EFFICIENCY CLASSIFIER\n",
    "# --------------------------------------------------\n",
    "print(\"\\n=== Exercise 3: Energy Efficiency Classifier ===\")\n",
    "\n",
    "# --- Part A: Annual Energy Calculation ---\n",
    "# Convert monthly intensity → yearly (×12)\n",
    "annual_intensity = [x * 12 for x in energy_intensity]\n",
    "for i, building in enumerate(buildings):\n",
    "    print(f\"{building}: {annual_intensity[i]:.2f} kWh/m^2/year\")\n",
    "\n",
    "# --- Part B: Efficiency Classification ---\n",
    "# Classify each building (A-F) based on annual energy intensity\n",
    "ratings = []\n",
    "for intensity in annual_intensity:\n",
    "    if intensity < 50:\n",
    "        ratings.append('A')\n",
    "    elif intensity < 100:\n",
    "        ratings.append('B')\n",
    "    elif intensity < 150:\n",
    "        ratings.append('C')\n",
    "    elif intensity < 200:\n",
    "        ratings.append('D')\n",
    "    else:\n",
    "        ratings.append('F')\n",
    "\n",
    "# Display classification report\n",
    "print(\"\\n=== Energy Efficiency Report ===\")\n",
    "for i, building in enumerate(buildings):\n",
    "    print(f\"{building}: {annual_intensity[i]:.2f} kWh/m^2/year - Rating: {ratings[i]}\")\n",
    "\n",
    "# --- Part C: Rating Summary ---\n",
    "# Count how many buildings fall into each rating category\n",
    "print(\"\\n=== Rating Summary ===\")\n",
    "for r in ['A', 'B', 'C', 'D', 'F']:\n",
    "    print(f\"Rating {r}: {ratings.count(r)} buildings\")\n",
    "\n",
    "most_common_rating = max(set(ratings), key=ratings.count)\n",
    "print(f\"Most Common Rating: {most_common_rating}\")\n",
    "\n",
    "\n",
    "# --------------------------------------------------\n",
    "# EXERCISE 4: ENERGY COST CALCULATOR\n",
    "# --------------------------------------------------\n",
    "print(\"\\n=== Exercise 4: Energy Cost Calculator ===\")\n",
    "\n",
    "# --- Part A: Simple Cost Function ---\n",
    "def calculate_monthly_cost(consumption_kwh, rate_per_kwh):\n",
    "    \"\"\"Calculate monthly energy cost = energy * rate.\"\"\"\n",
    "    return consumption_kwh * rate_per_kwh\n",
    "\n",
    "# Test simple function\n",
    "cost_test = calculate_monthly_cost(50000, 0.12)\n",
    "print(f\"Monthly Cost for 50,000 kWh @ $0.12/kWh: ${cost_test:,.2f}\")\n",
    "\n",
    "# --- Part B: Peak/Off-Peak Cost Function ---\n",
    "# Tiered pricing: Peak hours cost more, off-peak cost less\n",
    "def calculate_tiered_cost(total_consumption, peak_percentage=0.6):\n",
    "    peak_rate = 0.15       # Price per kWh during peak hours\n",
    "    off_peak_rate = 0.08   # Price per kWh during off-peak hours\n",
    "    peak_consumption = total_consumption * peak_percentage\n",
    "    off_peak_consumption = total_consumption * (1 - peak_percentage)\n",
    "    peak_cost = peak_consumption * peak_rate\n",
    "    off_peak_cost = off_peak_consumption * off_peak_rate\n",
    "    total_cost = peak_cost + off_peak_cost\n",
    "    return peak_cost, off_peak_cost, total_cost  # Return all values\n",
    "\n",
    "# Test tiered cost function\n",
    "peak_cost, off_peak_cost, total_cost = calculate_tiered_cost(85000, 0.6)\n",
    "print(f\"\\nPeak Cost: ${peak_cost:,.2f}\\nOff-Peak Cost: ${off_peak_cost:,.2f}\\nTotal Cost: ${total_cost:,.2f}\")\n",
    "\n",
    "\n",
    "# --------------------------------------------------\n",
    "# EXERCISE 5: ENERGY OPTIMIZATION\n",
    "# --------------------------------------------------\n",
    "print(\"\\n=== Exercise 5: Energy Optimization ===\")\n",
    "\n",
    "# --- Part A: Most & Least Efficient Buildings ---\n",
    "# Find min/max intensity and corresponding buildings\n",
    "min_intensity = min(annual_intensity)\n",
    "max_intensity = max(annual_intensity)\n",
    "min_index = annual_intensity.index(min_intensity)\n",
    "max_index = annual_intensity.index(max_intensity)\n",
    "\n",
    "# Identify best and worst performers\n",
    "most_efficient = buildings[min_index]\n",
    "least_efficient = buildings[max_index]\n",
    "percentage_diff = ((max_intensity - min_intensity) / max_intensity) * 100\n",
    "\n",
    "print(f\"Most Efficient: {most_efficient} ({min_intensity:.2f} kWh/m^2/year, Rating {ratings[min_index]})\")\n",
    "print(f\"Least Efficient: {least_efficient} ({max_intensity:.2f} kWh/m^2/year, Rating {ratings[max_index]})\")\n",
    "print(f\"Percentage Difference: {percentage_diff:.2f}%\")\n",
    "\n",
    "# --- Part B: Energy Savings Potential ---\n",
    "# Estimate total energy and cost savings if all buildings reach 'B' level (100 kWh/m²/year)\n",
    "total_savings_kwh = 0\n",
    "standard_rate = 0.12  # Standard electricity cost\n",
    "\n",
    "print(\"\\n=== Energy Savings Potential ===\")\n",
    "print(\"If all buildings achieved Rating B (100 kWh/m^2/year):\")\n",
    "\n",
    "for i, building in enumerate(buildings):\n",
    "    if ratings[i] in ['C', 'D', 'F']:  # Only less efficient ones\n",
    "        current_consumption = annual_intensity[i] * floor_area[i]\n",
    "        target_consumption = 100 * floor_area[i]\n",
    "        savings = current_consumption - target_consumption\n",
    "        total_savings_kwh += savings\n",
    "        print(f\"{building}: Could save {savings:,.0f} kWh/year\")\n",
    "\n",
    "# Convert total savings to cost savings\n",
    "total_cost_savings = total_savings_kwh * standard_rate\n",
    "print(f\"\\nTotal Potential Savings: {total_savings_kwh:,.0f} kWh/year\")\n",
    "print(f\"Annual Cost Savings: ${total_cost_savings:,.2f}\")\n",
    "\n",
    "\n",
    "# --------------------------------------------------\n",
    "# BONUS CHALLENGE: INTERACTIVE ENERGY CALCULATOR (+5 POINTS)\n",
    "# --------------------------------------------------\n",
    "print(\"\\n=== Bonus Challenge: Interactive Energy Calculator ===\")\n",
    "\n",
    "# This section allows the user to enter their own building data\n",
    "# and automatically calculates intensity, rating, and cost.\n",
    "while True:\n",
    "    building_name = input(\"Enter building name (or 'quit' to exit): \")\n",
    "    if building_name.lower() == 'quit':  # Exit condition\n",
    "        print(\"Exiting interactive calculator. Goodbye!\")\n",
    "        break\n",
    "    try:\n",
    "        # Get user input values\n",
    "        monthly_kwh = float(input(\"Enter monthly consumption (kWh): \"))\n",
    "        floor_m2 = float(input(\"Enter floor area (m^2): \"))\n",
    "\n",
    "        # Calculate annual intensity\n",
    "        energy_intensity = (monthly_kwh / floor_m2) * 12\n",
    "\n",
    "        # Determine energy rating based on thresholds\n",
    "        if energy_intensity < 50:\n",
    "            rating = 'A'\n",
    "        elif energy_intensity < 100:\n",
    "            rating = 'B'\n",
    "        elif energy_intensity < 150:\n",
    "            rating = 'C'\n",
    "        elif energy_intensity < 200:\n",
    "            rating = 'D'\n",
    "        else:\n",
    "            rating = 'F'\n",
    "\n",
    "        # Calculate cost using previously defined tiered pricing function\n",
    "        _, _, total_cost = calculate_tiered_cost(monthly_kwh, 0.6)\n",
    "\n",
    "        # Display a full analysis summary for the user\n",
    "        print(f\"\\n=== Analysis for {building_name} ===\")\n",
    "        print(f\"Monthly Consumption: {monthly_kwh:.0f} kWh\")\n",
    "        print(f\"Floor Area: {floor_m2:.0f} m²\")\n",
    "        print(f\"Energy Intensity: {energy_intensity:.2f} kWh/m²/year\")\n",
    "        print(f\"Efficiency Rating: {rating}\")\n",
    "        print(f\"Monthly Cost (tiered): ${total_cost:,.2f}\\n\")\n",
    "\n",
    "    except ValueError:\n",
    "        # Handle invalid numeric inputs\n",
    "        print(\"Invalid input. Please enter numeric values for consumption and area.\\n\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
